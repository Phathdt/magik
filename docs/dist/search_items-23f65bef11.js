searchNodes=[{"doc":"Documentation for Magik.","ref":"Magik.html","title":"Magik","type":"module"},{"doc":"Hello world.Examplesiex&gt; Magik.hello() :world","ref":"Magik.html#hello/0","title":"Magik.hello/0","type":"function"},{"doc":"EctoEnum helps to generate enum type and enum helper function.You can define an enum module manually like thisdefmodule MyEnum do def enum, do: [&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;] def value1, do: &quot;value1&quot; def value2, do: &quot;value2&quot; def value3, do: &quot;value3&quot; endNow with EctoEnum you can do it with a few lines of codedefmodule MyEnum do use Magik.EctoEnum, [&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;] endIt still provides same functions with manual implemented moduleUse in ecto schemaEctoEnum also defines a Type module that you can used directly in Ecto schemadefmodule Order do schema &quot;orders do field :first_name, :string field :last_name, :string field :status, MyEnum.Type end endEctoEnum automatically validate value and only allow valid value","ref":"Magik.EctoEnum.html","title":"Magik.EctoEnum","type":"module"},{"doc":"","ref":"Magik.ExcelView.html","title":"Magik.ExcelView","type":"module"},{"doc":"render cell with a view, view must define render_cell/2 for each field field definition format:{field_name, format}field_name","ref":"Magik.ExcelView.html#render_cell/3","title":"Magik.ExcelView.render_cell/3","type":"function"},{"doc":"","ref":"Magik.ExcelView.html#render_row/3","title":"Magik.ExcelView.render_row/3","type":"function"},{"doc":"Provides functions to format value to string","ref":"Magik.Formatter.html","title":"Magik.Formatter","type":"module"},{"doc":"Format currency value to thousand separated stringParametersnumber: integer numberopts: list of format optionsthousand_separator: thousand separator character. Default is ,currency: currency character. Default is &quot;Ä‘&quot;Exampleiex&gt; Magik.Formatter.format_currency(&quot;1232321&quot;, thousand_separator: &quot;.&quot;, currency: &quot;$&quot;) 1.232.321$","ref":"Magik.Formatter.html#format_currency/2","title":"Magik.Formatter.format_currency/2","type":"function"},{"doc":"Format number to thousand seperated stringParametersnumber: integer numberseparator: thousand separator character. Default is .Exampleiex&gt; Magik.Formatter.format_thousand(&quot;1232321&quot;, &quot;.&quot;) 1.232.321","ref":"Magik.Formatter.html#format_thousand/2","title":"Magik.Formatter.format_thousand/2","type":"function"},{"doc":"Render a struct to a map with given optionsfields: which fields are extract directly from structcustom_fields: which fields are render using custom render_field/2 functionrelationships: a list of {field, view_module} defines which fields are rendered using another viewHere is a sample viewdefmodule MyApp.PostView do use JsonView @fields [:title, :content, :excerpt, :cover] @custom_fields [:like_count] @relationships [author: MyApp.AuthorView] def render(&quot;post.json&quot;, %{post: post}) do # 1st way if `use JsonView` render_json(post, @fields, @custom_fields, @relationships) # 2nd way same as above JsonView.render_json(post, __MODULE__, fields: @fields, custom_fields: @custom_fields, relationships: @relationships ) # 3rd render manual post |&gt; JsonView.render_fields(@fields) |&gt; Map.merge(JsonView.render_custom_fields(post, __MODULE__, @custom_fields)) |&gt; Map.merge(JsonView.render_relationships(post, @relationships)) end def render_field(:like_count, item) do # load like_count from some where end end","ref":"Magik.JsonView.html","title":"Magik.JsonView","type":"module"},{"doc":"Render field with custom render function View module must defines render_field/2 function to render each custom fielduse JsonView def render_field(:is_success, item) do item.state &gt; 3 end render_custom_fields(struct, __MODULE__, [:is_success])","ref":"Magik.JsonView.html#render_custom_fields/3","title":"Magik.JsonView.render_custom_fields/3","type":"function"},{"doc":"","ref":"Magik.JsonView.html#render_fields/2","title":"Magik.JsonView.render_fields/2","type":"function"},{"doc":"","ref":"Magik.JsonView.html#render_json/3","title":"Magik.JsonView.render_json/3","type":"function"},{"doc":"","ref":"Magik.JsonView.html#render_relationship/3","title":"Magik.JsonView.render_relationship/3","type":"function"},{"doc":"Render relationship field for struct. relationships is a list of {field, view} for mapping render. For each field, call function View.render() to render json for relation object.Example relationships:relationships = [comments: CommentView, author: UserView]Result of render_relationships(post, relationships) equal to output of below code%{ comments: CommentView.render_many(comments, CommentView, &quot;comment.json&quot;), autho: UserView.render_one(author, UserView, &quot;user.json&quot;) }","ref":"Magik.JsonView.html#render_relationships/2","title":"Magik.JsonView.render_relationships/2","type":"function"},{"doc":"","ref":"Magik.JsonView.html#render_template/3","title":"Magik.JsonView.render_template/3","type":"function"},{"doc":"Support light paginate the query. does not support counting total item because counting on large table is expensive update: count total if needed","ref":"Magik.Paginator.html","title":"Magik.Paginator","type":"module"},{"doc":"","ref":"Magik.Paginator.html#paginate/3","title":"Magik.Paginator.paginate/3","type":"function"},{"doc":"This module provide some helpers functions that common used with RepoHow to useuse Magik.PowerUpRepo in your Repo module and all helper functions are ready for usedefmodule MyApp.Repo do use Ecto.Repo, otp_app: :my_app, adapter: Ecto.Adapters.Postgres use Magik.PowerUpRepo end","ref":"Magik.PowerUpRepo.html","title":"Magik.PowerUpRepo","type":"behaviour"},{"doc":"Find the first entry in the database that match the filtercase Repo.find(Product, brand_id: 1, is_active: true) do {:ok, product} -&gt; IO.puts(product.name) {:error, :not_found} -&gt; IO.puts(&quot;No product found&quot;) end","ref":"Magik.PowerUpRepo.html#c:find/2","title":"Magik.PowerUpRepo.find/2","type":"callback"},{"doc":"Fetch query by pagination paramaExamplequery = from(p in Product, where: p.quantity &gt; 10) {entries, paginator} = Repo.paginate(query, %{page: 2, size: 5})","ref":"Magik.PowerUpRepo.html#c:paginate/3","title":"Magik.PowerUpRepo.paginate/3","type":"callback"},{"doc":"Preload entries return from Repo.paginateExample{entries, paginator} = from(p in Product, where: p.quantity &gt; 10 ) |&gt; Repo.paginate(%{page: 2, size: 5}) |&gt; Repo.preload([:brand, :category])","ref":"Magik.PowerUpRepo.html#c:preload_paginate/2","title":"Magik.PowerUpRepo.preload_paginate/2","type":"callback"},{"doc":"Load query with given size and provide the result as a streamOptionspage_size: number of entry to load per batchExamplefrom(p in Product, where: p.quantity &gt; 10 ) |&gt; Repo.stream_query(20) |&gt; Stream.map( &amp; &amp;1.name) |&gt; Enum.to_list","ref":"Magik.PowerUpRepo.html#c:stream_query/2","title":"Magik.PowerUpRepo.stream_query/2","type":"callback"},{"doc":"This module provide some helper functions that help to send message to a telegram conversationConfigconfig :magik, :telegram_noti, bot_token: &quot;your bot token&quot;. conversations: [ default: &quot;default_chat_id&quot;, admin: &quot;other chat id&quot; ], mode: :prod # or :devbot_token: your Telegram bot tokentconversations: keyword list of name and chat_id. There must be at least 1 conversation which is :default. default is used if you don't specify conversation name in the function call.Then you are ready to send message to your Telegram conversation","ref":"Magik.TelegramNoti.html","title":"Magik.TelegramNoti","type":"module"},{"doc":"Format and send error message to a Telegam conversation with data from a connection. This helper is used to send error from your phoenix router or controller.From routerdefmodule MyApp.Router do use MyAppWeb, :router use Plug.ErrorHandler ... def handle_errors(conn, error) do if conn.status &gt;= 500 do Magik.TelegramNoti.send_conn_error(:api, conn, error) end .... end endfrom controllerdefmodule MyAppWeb.PageController do ... def index(conn, params)do try do ... catch error -&gt; Magik.TelegramNoti.send_conn_error(:api, conn, %{kind: :error, reason: error, stack: __STACKTRACE__}) # return your error end end end","ref":"Magik.TelegramNoti.html#send_conn_error/3","title":"Magik.TelegramNoti.send_conn_error/3","type":"function"},{"doc":"Format error and send to Telegram conversation.defmodule MyApp.Calculator do ... def divide(a, b)do try do ... catch error -&gt; Magik.TelegramNoti.send_error(:api, &quot;MyApp.Calculator error&quot;, [a,b], %{kind: :error, reason: error, stack: __STACKTRACE__}) # return your error end end end","ref":"Magik.TelegramNoti.html#send_error/4","title":"Magik.TelegramNoti.send_error/4","type":"function"},{"doc":"Send a message to conversationsend_message(:api, &quot;this is a sample message&quot;)","ref":"Magik.TelegramNoti.html#send_message/2","title":"Magik.TelegramNoti.send_message/2","type":"function"},{"doc":"This macro help you to catch exceptions and then send to your Telegram conversation using send_error/4Optionsto: conversation name from your config. Default is :defaultargs: argument list that passed to function, this is sent to telegram chat for dev to debug easier. If not speficied, arguments for current function call are usedlabel: label for this error/function. If not specified, current function name is used.Example... require Magik.TelegramNoti def do_something(args) do Magik.TelegramNoti.watch [to: :admin] do # your logic code here end end ...","ref":"Magik.TelegramNoti.html#watch/2","title":"Magik.TelegramNoti.watch/2","type":"macro"},{"doc":"MagikMagik brings magics to your project that helps to make your life easierDocument here","ref":"readme.html","title":"Magik","type":"extras"},{"doc":"1. Magik.PaginatorHelp you to query by page and size with support for both counting and no counting total page (simple load more function)2. Magik.JsonViewRender json with custom field and relationship that helps you to reuse view and build consistent json structure3. Magik.ExcelViewHelp you to render excel data with format supported4. Magik.EctoEnumBuild enum module faster, shorter and can use directly in schema definition5. Magik.PowerUpRepoAdd some handy method to your Repo module that make your Repo module more powerful6. Magik.TelegramNotiProvide helper function watch exception, format message and send notification to a Telegram conversation","ref":"readme.html#here-are-some-magics-in-the-magik-toolbox","title":"Magik - Here are some magics in the Magik toolbox","type":"extras"}]